import type { AgencyGraphQL, BitacoraPOMassive, BundleGraphQL, CaseGraphQL, CurrencyGraphQL, EmployeeGraphQL, FormGraphQL, FormSubmissionGraphQL, InvoiceGraphQL, ItemCategoryGraphQL, ItemGraphQL, LotStockGraphQL, MotivoRechazo, PayeeCategoryGraphQL, PayeeGraphQL, PaymentTermGraphQL, ReceptionType, ShipmentGraphQL, SuggestedPriceGraphQL, Template, TipoMuestra, WebAppRowGraphQL } from "@zauru-sdk/types";
export type ONLINE_CATALOGS_NAMES = "invoiceFormSubmissionsByInvoiceId" | "invoiceFormSubmissionsByAgencyId";
export type CATALOGS_NAMES = "agencies" | "suggestedPrices" | "providers" | "providerCategories" | "receptionTypes" | "tiposDeMuestra" | "motivosRechazo" | "bitacoraRechazoMasivo" | "items" | "itemsByReception" | "itemsByLab" | "itemServicesByLab" | "itemCategoriesForLab" | "payees" | "payeesForLab" | "payeeCategoriesLabPrices" | "clientCategories" | "bundlesRecipForLab" | "currencies" | "paymentTerms" | "employeesByLab" | "employeesByCurrentAgency" | "invoicesByLab" | "invoiceForms" | "caseForms" | "invoiceFormSubmissions" | "myCases" | "myCaseFormSubmissions" | "shipmentsToMyAgency" | "myAgencyLotStocks" | "shipments" | "bookings" | "templates" | "bundlesForLab";
type LoadingState<T> = {
    data: T;
    loading: boolean;
    reFetch: boolean;
};
type CatalogState = {
    agencies: LoadingState<AgencyGraphQL[]>;
    suggestedPrices: LoadingState<SuggestedPriceGraphQL[]>;
    providers: LoadingState<PayeeGraphQL[]>;
    providerCategories: LoadingState<PayeeCategoryGraphQL[]>;
    payees: LoadingState<PayeeGraphQL[]>;
    payeesForLab: LoadingState<PayeeGraphQL[]>;
    payeeCategoriesLabPrices: LoadingState<PayeeCategoryGraphQL[]>;
    clientCategories: LoadingState<PayeeCategoryGraphQL[]>;
    receptionTypes: LoadingState<WebAppRowGraphQL<ReceptionType>[]>;
    tiposDeMuestra: LoadingState<WebAppRowGraphQL<TipoMuestra>[]>;
    templates: LoadingState<WebAppRowGraphQL<Template>[]>;
    shipments: LoadingState<ShipmentGraphQL[]>;
    bookings: LoadingState<ShipmentGraphQL[]>;
    motivosRechazo: LoadingState<WebAppRowGraphQL<MotivoRechazo>[]>;
    bitacoraRechazoMasivo: LoadingState<WebAppRowGraphQL<BitacoraPOMassive>[]>;
    items: LoadingState<ItemGraphQL[]>;
    itemsByReception: LoadingState<ItemGraphQL[]>;
    itemsByLab: LoadingState<ItemGraphQL[]>;
    itemServicesByLab: LoadingState<ItemGraphQL[]>;
    itemCategoriesForLab: LoadingState<ItemCategoryGraphQL[]>;
    bundlesRecipForLab: LoadingState<BundleGraphQL[]>;
    bundlesForLab: LoadingState<BundleGraphQL[]>;
    currencies: LoadingState<CurrencyGraphQL[]>;
    paymentTerms: LoadingState<PaymentTermGraphQL[]>;
    employeesByLab: LoadingState<EmployeeGraphQL[]>;
    employeesByCurrentAgency: LoadingState<EmployeeGraphQL[]>;
    invoicesByLab: LoadingState<InvoiceGraphQL[]>;
    invoiceForms: LoadingState<FormGraphQL[]>;
    caseForms: LoadingState<FormGraphQL[]>;
    invoiceFormSubmissions: LoadingState<FormSubmissionGraphQL[]>;
    myCases: LoadingState<CaseGraphQL[]>;
    myCaseFormSubmissions: LoadingState<FormSubmissionGraphQL[]>;
    myAgencyLotStocks: LoadingState<LotStockGraphQL[]>;
    shipmentsToMyAgency: LoadingState<ShipmentGraphQL[]>;
};
export declare const catalogsFetchStart: import("@reduxjs/toolkit").ActionCreatorWithPayload<CATALOGS_NAMES, "catalogs/catalogsFetchStart">, catalogsFetchSuccess: import("@reduxjs/toolkit").ActionCreatorWithPayload<{
    name: CATALOGS_NAMES;
    data: any[];
}, "catalogs/catalogsFetchSuccess">, catalogsSetReFetch: import("@reduxjs/toolkit").ActionCreatorWithPayload<CATALOGS_NAMES, "catalogs/catalogsSetReFetch">;
declare const _default: import("redux").Reducer<CatalogState>;
export default _default;
